
>>> def add(a, b):
...     return a + b
...
>>> add(5, 7)
12
>>> add("news", "paper")
'newspaper'
>>>

>>> add("The answer is", 42)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 2, in add
TypeError: can only concatenate str (not "int") to str

>>> add("The answer is", "42")
'The answer is42'
>>> add("The answer is", " 42")
'The answer is 42'
>>>



>>> count = 0
>>> def show_count():
...     print(count)
...
>>> def set_count(c):
...     count = c
...
>>> show_count
<function show_count at 0x000001D0F4F7E550>
>>> show_count()
0
>>> set_count()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: set_count() missing 1 required positional argument: 'c'
>>> set_count(5)
>>> show_count()
0
>>> def set_count(c):
...     global count
...     count = c
...
>>> show_count()
0
>>> set_count(5)
>>> show_count()
5
>>>

>>> import words
>>> type(words)
<class 'module'>
>>> dir(words)
['__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'fetch_words', 'main', 'print_items', 'sys', 'urlopen']
>>> type(words.fetch_words)
<class 'function'>
>>> dir(words.fetch_words)
['__annotations__', '__call__', '__class__', '__closure__', '__code__', '__defaults__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__get__', '__getattribute__', '__globals__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__kwdefaults__', '__le__', '__lt__', '__module__', '__name__', '__ne__', '__new__', '__qualname__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__']
>>>



>>> def banner(message, border='-'):
...     line = border * len(message)
...     print(line)
...     print(message)
...     print(line)
...
>>> banner('Stars and Stripes')
-----------------
Stars and Stripes
-----------------
>>>


>>> t = (Norway, 4.9, 3)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'Norway' is not defined
>>> t = ("Norway", 4.9, 3)
>>> t
('Norway', 4.9, 3)
>>> t[0]
'Norway'
>>> for item in t:
...     print(item)
...
Norway
4.9
3

>>> t + (338186.0, 2650000000.0)
('Norway', 4.9, 3, 338186.0, 2650000000.0)
>>> t * 3
('Norway', 4.9, 3, 'Norway', 4.9, 3, 'Norway', 4.9, 3)
>>> h = (391)
>>> h
391
>>> type(h)
<class 'int'>
>>> k = (391,)
>>> k
(391,)
>>> type(k)
<class 'tuple'>

>>> def minmax(items):
...     return min(items), max(items)
...
>>> minmax ([83, 33, 84, 32, 85, 31, 86])

(31, 86)
>>> (a, (b, (c, d))) = (4, (3, (2, 1)))
>>> a
4
>>> b
3
>>> c
2
>>> d
1
>>> 4
4
>>> 3
3

>>> len("llaanfairpwllgwyngyllgogerchwyr")
31
>>> "New" + "found" + "land"
'Newfoundland'

>>>
>>> s = "New"
>>> s+= "found"
>>> s+= "land"
>>> s
'Newfoundland'

>>> colors = ';'.join(['#45ff23', '#2321fa', '#1298a3', '#a32312'])
>>> colors
'#45ff23;#2321fa;#1298a3;#a32312'
>>> colors.split(';')
['#45ff23', '#2321fa', '#1298a3', '#a32312']
>>> ''.join(['high', 'way', 'man'])
'highwayman'
>>> "unforgettable".partition('forget')
('un', 'forget', 'table')
>>> "The age of {0} is {1}".format('Jim', 32)
'The age of Jim is 32'
>>> "The age of {0} is {1}.  {0}'s birthday is on {2}.format('Fred', 24, 'October 31')
  File "<stdin>", line 1
    "The age of {0} is {1}.  {0}'s birthday is on {2}.format('Fred', 24, 'October 31')
                                                                                      ^
SyntaxError: EOL while scanning string literal

>>> "The age of {0} is {1}.  {0}'s birthday is on {2}".format('Fred', 24, 'October 31')
"The age of Fred is 24.  Fred's birthday is on October 31"
>>> "Reticulating spline {} of {}.".format(4, 23)
'Reticulating spline 4 of 23.'
>>> "Current position {latitude} {longitude}".format(latitude="60N", longitude="5E")
'Current position 60N 5E'

"Galactic position x={pos[0]}, y={pos[1]}. z={pos[2]}".format(pos=(65.2, 23.1, 82.2))
'Galactic position x=65.2, y=23.1. z=82.2'


>>> import math
>>> "Math constants:  pi={m.pi}, e={m.e}".format(m=math)
'Math constants:  pi=3.141592653589793, e=2.718281828459045'
>>> value = 4 * 20
>>> f'The value {value}'
'The value 80'

s = [0, 1, 4, 6, 13]
for i in range(len(s)):
...     print(s[i])
...
0
1
4
6
13
^ THIS is unconventional and frowned upon
s = [0, 1, 4, 6, 13]
for v in s:
...     print(v)
...
0
1
4
6
13
Always prefer to use iterations over objects



>>> t = [6, 372, 8862, 148800, 2096886]
>>> for p in enumerate(t):
...     print(p)
...
(0, 6)
(1, 372)
(2, 8862)
(3, 148800)
(4, 2096886)
>>> for i, v in enumerate(t):
...     print(f'i = {i}, v = {v}')
...
i = 0, v = 6
i = 1, v = 372
i = 2, v = 8862
i = 3, v = 148800
i = 4, v = 2096886
>>>

>>> r = [1, -4, 10, -16, 15]
>>> r[-1]
15
>>> r[-2]
-16
>>> r[-3]
10

>>> s = [3, 186, 4431, 7440, 1048443]
>>> s[1:3]
[186, 4431]
>>>
s = [3, 186, 4431, 7440, 1048443]
>>> s[1:-1]
[186, 4431, 7440]
>>> s[2:]
[4431, 7440, 1048443]
>>> s[:2]
[3, 186]
>>>

>>> u = "jackdaws love my big sphinx of quartz".split()
>>> u
['jackdaws', 'love', 'my', 'big', 'sphinx', 'of', 'quartz']
>>> del u[3]
>>> u
['jackdaws', 'love', 'my', 'sphinx', 'of', 'quartz']
>>> u.remove('jackdaws')
>>> u
['love', 'my', 'sphinx', 'of', 'quartz']
>>>

>>> a
['I', 'accidentally', 'the', 'whole', 'universe.']
>>> a.insert(2, 'destroyed')
>>> a
['I', 'accidentally', 'destroyed', 'the', 'whole', 'universe.']

>>> m = [2, 1, 3]
>>> n = [4, 7, 11]
>>> k = m + n
>>> k
[2, 1, 3, 4, 7, 11]
>>> k += [18, 29, 47]
>>> k
[2, 1, 3, 4, 7, 11, 18, 29, 47]
>>> k.extend([76, 129, 199])
>>> k
[2, 1, 3, 4, 7, 11, 18, 29, 47, 76, 129, 199]
>>>

>>> names_and_ages = [ ('Alice', 32), ('Bob', 48), ('Charlie', 28), ('Daniel', 33) ]
>>> d = dict(names_and_ages)
>>> d
{'Alice': 32, 'Bob': 48, 'Charlie': 28, 'Daniel': 33}
>>>

>>> d = dict(goldenrod=0xDAA520, indigo=0x4B0082, seashell=0xFFF5EE)
>>> e = d.copy()
>>> e
{'goldenrod': 14329120, 'indigo': 4915330, 'seashell': 16774638}
>>> d
{'goldenrod': 14329120, 'indigo': 4915330, 'seashell': 16774638}
>>>
>>> f = dict(e)
>>> f
{'goldenrod': 14329120, 'indigo': 4915330, 'seashell': 16774638}
>>> g = dict(wheat=0xF5DEB3, khaki=0xF0E68C, crimson=0xDC143C)
>>> f.update(g)
>>> f
{'goldenrod': 14329120, 'indigo': 4915330, 'seashell': 16774638, 'wheat': 16113331, 'khaki': 15787660, 'crimson': 14423100}

>>> colors= dict(aquamarine='#7FFFD4', burlywood='#DEB887', chartreuse='#7FFF00', cornflower='#6495ED', firebrick='#B22222', honeydew='#F0FFF0', maroon='#B03060', sienna='#A0522D')
for key in colors:
...     print(f"{key} => {colors[key]}")
...
aquamarine => #7FFFD4
burlywood => #DEB887
chartreuse => #7FFF00
cornflower => #6495ED
firebrick => #B22222
honeydew => #F0FFF0
maroon => #B03060
sienna => #A0522D
for value in colors.values():
...     print(value)
...
#7FFFD4
#DEB887
#7FFF00
#6495ED
#B22222
#F0FFF0
#B03060
#A0522D

>>> for key, value in colors.items():
...     print(f"{key} => {value}")
...
aquamarine => #7FFFD4
burlywood => #DEB887
chartreuse => #7FFF00
cornflower => #6495ED
firebrick => #B22222
honeydew => #F0FFF0
maroon => #B03060
sienna => #A0522D

>>> p = {6, 28, 496, 8128, 33550336}
>>> p
{33550336, 8128, 496, 6, 28}
>>> type(p)
<class 'set'>

>>> k = {81, 108}
>>> k.add(54)
>>> k
{81, 108, 54}
>>> k.add(108)
>>> k
{81, 108, 54}
>>> k.add(12)
>>> k
{81, 108, 12, 54}
>>>
 k.update([37,128,97])
>>> k
{128, 97, 37, 108, 12, 81, 54}

>>> blue_eyes = {'Olivia', 'Harry', 'Lily', 'Jack', 'Amelia'}
>>> o_blood = {'Mia', 'Joshua', 'Lily', 'Olivia'}
>>> blue_eyes.union(o_blood)
{'Jack', 'Lily', 'Harry', 'Joshua', 'Olivia', 'Mia', 'Amelia'}
>>> blue_eyes.intersection(o_blood)
{'Lily', 'Olivia'}
>>> blue_eyes.difference(o_blood)
{'Jack', 'Harry', 'Amelia'}
>>> blue_eyes.symmetric_difference(o_blood)
{'Jack', 'Harry', 'Joshua', 'Mia', 'Amelia'}

>>> words = "Why sometimes I have believed as many as six impossible things before breakfast".split()
>>> words
['Why', 'sometimes', 'I', 'have', 'believed', 'as', 'many', 'as', 'six', 'impossible', 'things', 'before', 'breakfast']
>>> [len(word) for word in words]
[3, 9, 1, 4, 8, 2, 4, 2, 3, 10, 6, 6, 9]

>>> country_to_capital =  { 'United Kingdom'  : 'London',
...                         'Brazil' : 'Brasilia',
...                         'Morocco' : 'Rabat',
...                         'Sweden' : 'Stockholm'  }
>>> capital_to_country = {capital: country  for country, capital in country_to_capital.items()}
>>> from pprint import pprint as pp
>>> pp(capital_to_country)
{'Brasilia': 'Brazil',
 'London': 'United Kingdom',
 'Rabat': 'Morocco',
 'Stockholm': 'Sweden'}
>>>

Example of an iteration:
>>> iterable = ['Spring', 'Summer', 'Autumn', 'Winter']
>>> iterator = iter(iterable)
>>> next(iterator)
'Spring'
>>> next(iterator)
'Summer'
>>> next(iterator)
'Autumn'
>>> next(iterator)
'Winter'
>>> next(iterator)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
StopIteration
>>>

Instead of receiving a StopIteration error you can write can iteration with a raised exception to produce a value error instead marking the end of the sequence:
>>> def first(iterable):
...     iterator = iter(iterable)
...     try:
...         return next(iterator)
...     except StopIteration:
...         raise ValueError("iterable is empty")
...
>>>

A generator function is defined(def):

def gen123():
... yield 1
... yield 2
... yield 3
...
g = gen123()
g
<generator object gen123 at 0x0000014F2CC2FDD0>
next(g)
1
next(g)
2
next(g)
3
next(g)
Traceback (most recent call last):
File "<stdin>", line 1, in <module>
StopIteration


Creating two different variables of the same generator statement creates two different generators:

for v in gen123():
... print(v)
...
1
2
3
h = gen123()
i = gen123()
h
<generator object gen123 at 0x0000014F2CD55200>

i
<generator object gen123 at 0x0000014F2CD552E0>
h is i
False
next(h)
1
next(h)
2
next(i)
1
next(i)
2

Zip using a for loop
>>> sunday = [12, 14, 15, 17, 21, 22, 22, 23, 22, 20, 18]
>>> monday = [13, 14, 14, 16, 20, 21, 22, 22, 21, 19, 17]
>>> for item in zip(sunday, monday):
...     print(item)
...
(12, 13)
(14, 14)
(15, 14)
(17, 16)
(21, 20)
(22, 21)
(22, 22)
(23, 22)
(22, 21)
(20, 19)
(18, 17)
>>>
>>> for sun, mon in zip(sunday, monday):
...     print("average =", (sun + mon) / 2)
...
average = 12.5
average = 14.0
average = 14.5
average = 16.5
average = 20.5
average = 21.5
average = 22.0
average = 22.5
average = 21.5
average = 19.5
average = 17.5